// Code generated by "stringer -output=enum_string_4.go -type=MicromapTypeEXT,ObjectType,OpacityMicromapFormatEXT,OpacityMicromapSpecialIndexEXT,OpticalFlowExecuteFlagBitsNV,OpticalFlowGridSizeFlagBitsNV,OpticalFlowPerformanceLevelNV,OpticalFlowSessionBindingPointNV,OpticalFlowSessionCreateFlagBitsNV,OpticalFlowUsageFlagBitsNV,OutOfBandQueueTypeNV,PeerMemoryFeatureFlagBits,PerformanceConfigurationTypeINTEL,PerformanceCounterDescriptionFlagBitsKHR,PerformanceCounterScopeKHR,PerformanceCounterStorageKHR,PerformanceCounterUnitKHR,PerformanceOverrideTypeINTEL,PerformanceParameterTypeINTEL,PerformanceValueTypeINTEL,PhysicalDeviceSchedulingControlsFlagBitsARM,PhysicalDeviceType,PipelineBindPoint,PipelineCacheCreateFlagBits,PipelineCacheHeaderVersion,PipelineColorBlendStateCreateFlagBits,PipelineCreateFlagBits,PipelineCreateFlagBits2KHR,PipelineCreationFeedbackFlagBits,PipelineDepthStencilStateCreateFlagBits,PipelineExecutableStatisticFormatKHR"; DO NOT EDIT.

package vk

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MICROMAP_TYPE_OPACITY_MICROMAP_EXT-0]
}

const _MicromapTypeEXT_name = "MICROMAP_TYPE_OPACITY_MICROMAP_EXT"

var _MicromapTypeEXT_index = [...]uint8{0, 34}

func (i MicromapTypeEXT) String() string {
	if i < 0 || i >= MicromapTypeEXT(len(_MicromapTypeEXT_index)-1) {
		return "MicromapTypeEXT(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MicromapTypeEXT_name[_MicromapTypeEXT_index[i]:_MicromapTypeEXT_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OBJECT_TYPE_UNKNOWN-0]
	_ = x[OBJECT_TYPE_INSTANCE-1]
	_ = x[OBJECT_TYPE_PHYSICAL_DEVICE-2]
	_ = x[OBJECT_TYPE_DEVICE-3]
	_ = x[OBJECT_TYPE_QUEUE-4]
	_ = x[OBJECT_TYPE_SEMAPHORE-5]
	_ = x[OBJECT_TYPE_COMMAND_BUFFER-6]
	_ = x[OBJECT_TYPE_FENCE-7]
	_ = x[OBJECT_TYPE_DEVICE_MEMORY-8]
	_ = x[OBJECT_TYPE_BUFFER-9]
	_ = x[OBJECT_TYPE_IMAGE-10]
	_ = x[OBJECT_TYPE_EVENT-11]
	_ = x[OBJECT_TYPE_QUERY_POOL-12]
	_ = x[OBJECT_TYPE_BUFFER_VIEW-13]
	_ = x[OBJECT_TYPE_IMAGE_VIEW-14]
	_ = x[OBJECT_TYPE_SHADER_MODULE-15]
	_ = x[OBJECT_TYPE_PIPELINE_CACHE-16]
	_ = x[OBJECT_TYPE_PIPELINE_LAYOUT-17]
	_ = x[OBJECT_TYPE_RENDER_PASS-18]
	_ = x[OBJECT_TYPE_PIPELINE-19]
	_ = x[OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT-20]
	_ = x[OBJECT_TYPE_SAMPLER-21]
	_ = x[OBJECT_TYPE_DESCRIPTOR_POOL-22]
	_ = x[OBJECT_TYPE_DESCRIPTOR_SET-23]
	_ = x[OBJECT_TYPE_FRAMEBUFFER-24]
	_ = x[OBJECT_TYPE_COMMAND_POOL-25]
	_ = x[OBJECT_TYPE_SURFACE_KHR-1000000000]
	_ = x[OBJECT_TYPE_SWAPCHAIN_KHR-1000001000]
	_ = x[OBJECT_TYPE_DISPLAY_KHR-1000002000]
	_ = x[OBJECT_TYPE_DISPLAY_MODE_KHR-1000002001]
	_ = x[OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT-1000011000]
	_ = x[OBJECT_TYPE_VIDEO_SESSION_KHR-1000023000]
	_ = x[OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR-1000023001]
	_ = x[OBJECT_TYPE_CU_MODULE_NVX-1000029000]
	_ = x[OBJECT_TYPE_CU_FUNCTION_NVX-1000029001]
	_ = x[OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE-1000085000]
	_ = x[OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT-1000128000]
	_ = x[OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR-1000150000]
	_ = x[OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION-1000156000]
	_ = x[OBJECT_TYPE_VALIDATION_CACHE_EXT-1000160000]
	_ = x[OBJECT_TYPE_ACCELERATION_STRUCTURE_NV-1000165000]
	_ = x[OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL-1000210000]
	_ = x[OBJECT_TYPE_DEFERRED_OPERATION_KHR-1000268000]
	_ = x[OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV-1000277000]
	_ = x[OBJECT_TYPE_PRIVATE_DATA_SLOT-1000295000]
	_ = x[OBJECT_TYPE_CUDA_MODULE_NV-1000307000]
	_ = x[OBJECT_TYPE_CUDA_FUNCTION_NV-1000307001]
	_ = x[OBJECT_TYPE_MICROMAP_EXT-1000396000]
	_ = x[OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV-1000464000]
	_ = x[OBJECT_TYPE_SHADER_EXT-1000482000]
	_ = x[OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR-1000085000]
	_ = x[OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT-1000295000]
	_ = x[OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR-1000156000]
}

const _ObjectType_name = "OBJECT_TYPE_UNKNOWNOBJECT_TYPE_INSTANCEOBJECT_TYPE_PHYSICAL_DEVICEOBJECT_TYPE_DEVICEOBJECT_TYPE_QUEUEOBJECT_TYPE_SEMAPHOREOBJECT_TYPE_COMMAND_BUFFEROBJECT_TYPE_FENCEOBJECT_TYPE_DEVICE_MEMORYOBJECT_TYPE_BUFFEROBJECT_TYPE_IMAGEOBJECT_TYPE_EVENTOBJECT_TYPE_QUERY_POOLOBJECT_TYPE_BUFFER_VIEWOBJECT_TYPE_IMAGE_VIEWOBJECT_TYPE_SHADER_MODULEOBJECT_TYPE_PIPELINE_CACHEOBJECT_TYPE_PIPELINE_LAYOUTOBJECT_TYPE_RENDER_PASSOBJECT_TYPE_PIPELINEOBJECT_TYPE_DESCRIPTOR_SET_LAYOUTOBJECT_TYPE_SAMPLEROBJECT_TYPE_DESCRIPTOR_POOLOBJECT_TYPE_DESCRIPTOR_SETOBJECT_TYPE_FRAMEBUFFEROBJECT_TYPE_COMMAND_POOLOBJECT_TYPE_SURFACE_KHROBJECT_TYPE_SWAPCHAIN_KHROBJECT_TYPE_DISPLAY_KHROBJECT_TYPE_DISPLAY_MODE_KHROBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXTOBJECT_TYPE_VIDEO_SESSION_KHROBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHROBJECT_TYPE_CU_MODULE_NVXOBJECT_TYPE_CU_FUNCTION_NVXOBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATEOBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXTOBJECT_TYPE_ACCELERATION_STRUCTURE_KHROBJECT_TYPE_SAMPLER_YCBCR_CONVERSIONOBJECT_TYPE_VALIDATION_CACHE_EXTOBJECT_TYPE_ACCELERATION_STRUCTURE_NVOBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTELOBJECT_TYPE_DEFERRED_OPERATION_KHROBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVOBJECT_TYPE_PRIVATE_DATA_SLOTOBJECT_TYPE_CUDA_MODULE_NVOBJECT_TYPE_CUDA_FUNCTION_NVOBJECT_TYPE_MICROMAP_EXTOBJECT_TYPE_OPTICAL_FLOW_SESSION_NVOBJECT_TYPE_SHADER_EXT"

var _ObjectType_map = map[ObjectType]string{
	0:          _ObjectType_name[0:19],
	1:          _ObjectType_name[19:39],
	2:          _ObjectType_name[39:66],
	3:          _ObjectType_name[66:84],
	4:          _ObjectType_name[84:101],
	5:          _ObjectType_name[101:122],
	6:          _ObjectType_name[122:148],
	7:          _ObjectType_name[148:165],
	8:          _ObjectType_name[165:190],
	9:          _ObjectType_name[190:208],
	10:         _ObjectType_name[208:225],
	11:         _ObjectType_name[225:242],
	12:         _ObjectType_name[242:264],
	13:         _ObjectType_name[264:287],
	14:         _ObjectType_name[287:309],
	15:         _ObjectType_name[309:334],
	16:         _ObjectType_name[334:360],
	17:         _ObjectType_name[360:387],
	18:         _ObjectType_name[387:410],
	19:         _ObjectType_name[410:430],
	20:         _ObjectType_name[430:463],
	21:         _ObjectType_name[463:482],
	22:         _ObjectType_name[482:509],
	23:         _ObjectType_name[509:535],
	24:         _ObjectType_name[535:558],
	25:         _ObjectType_name[558:582],
	1000000000: _ObjectType_name[582:605],
	1000001000: _ObjectType_name[605:630],
	1000002000: _ObjectType_name[630:653],
	1000002001: _ObjectType_name[653:681],
	1000011000: _ObjectType_name[681:718],
	1000023000: _ObjectType_name[718:747],
	1000023001: _ObjectType_name[747:787],
	1000029000: _ObjectType_name[787:812],
	1000029001: _ObjectType_name[812:839],
	1000085000: _ObjectType_name[839:877],
	1000128000: _ObjectType_name[877:914],
	1000150000: _ObjectType_name[914:952],
	1000156000: _ObjectType_name[952:988],
	1000160000: _ObjectType_name[988:1020],
	1000165000: _ObjectType_name[1020:1057],
	1000210000: _ObjectType_name[1057:1100],
	1000268000: _ObjectType_name[1100:1134],
	1000277000: _ObjectType_name[1134:1173],
	1000295000: _ObjectType_name[1173:1202],
	1000307000: _ObjectType_name[1202:1228],
	1000307001: _ObjectType_name[1228:1256],
	1000396000: _ObjectType_name[1256:1280],
	1000464000: _ObjectType_name[1280:1315],
	1000482000: _ObjectType_name[1315:1337],
}

func (i ObjectType) String() string {
	if str, ok := _ObjectType_map[i]; ok {
		return str
	}
	return "ObjectType(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPACITY_MICROMAP_FORMAT_2_STATE_EXT-1]
	_ = x[OPACITY_MICROMAP_FORMAT_4_STATE_EXT-2]
}

const _OpacityMicromapFormatEXT_name = "OPACITY_MICROMAP_FORMAT_2_STATE_EXTOPACITY_MICROMAP_FORMAT_4_STATE_EXT"

var _OpacityMicromapFormatEXT_index = [...]uint8{0, 35, 70}

func (i OpacityMicromapFormatEXT) String() string {
	i -= 1
	if i < 0 || i >= OpacityMicromapFormatEXT(len(_OpacityMicromapFormatEXT_index)-1) {
		return "OpacityMicromapFormatEXT(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _OpacityMicromapFormatEXT_name[_OpacityMicromapFormatEXT_index[i]:_OpacityMicromapFormatEXT_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT - -4]
	_ = x[OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT - -3]
	_ = x[OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT - -2]
	_ = x[OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT - -1]
}

const _OpacityMicromapSpecialIndexEXT_name = "OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXTOPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXTOPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXTOPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT"

var _OpacityMicromapSpecialIndexEXT_index = [...]uint8{0, 55, 115, 162, 214}

func (i OpacityMicromapSpecialIndexEXT) String() string {
	i -= -4
	if i < 0 || i >= OpacityMicromapSpecialIndexEXT(len(_OpacityMicromapSpecialIndexEXT_index)-1) {
		return "OpacityMicromapSpecialIndexEXT(" + strconv.FormatInt(int64(i+-4), 10) + ")"
	}
	return _OpacityMicromapSpecialIndexEXT_name[_OpacityMicromapSpecialIndexEXT_index[i]:_OpacityMicromapSpecialIndexEXT_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV-1]
}

const _OpticalFlowExecuteFlagBitsNV_name = "OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV"

var _OpticalFlowExecuteFlagBitsNV_index = [...]uint8{0, 50}

func (i OpticalFlowExecuteFlagBitsNV) String() string {
	i -= 1
	if i >= OpticalFlowExecuteFlagBitsNV(len(_OpticalFlowExecuteFlagBitsNV_index)-1) {
		return "OpticalFlowExecuteFlagBitsNV(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _OpticalFlowExecuteFlagBitsNV_name[_OpticalFlowExecuteFlagBitsNV_index[i]:_OpticalFlowExecuteFlagBitsNV_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV-0]
	_ = x[OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV-1]
	_ = x[OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV-2]
	_ = x[OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV-4]
	_ = x[OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV-8]
}

const (
	_OpticalFlowGridSizeFlagBitsNV_name_0 = "OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NVOPTICAL_FLOW_GRID_SIZE_1X1_BIT_NVOPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV"
	_OpticalFlowGridSizeFlagBitsNV_name_1 = "OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV"
	_OpticalFlowGridSizeFlagBitsNV_name_2 = "OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV"
)

var (
	_OpticalFlowGridSizeFlagBitsNV_index_0 = [...]uint8{0, 33, 66, 99}
)

func (i OpticalFlowGridSizeFlagBitsNV) String() string {
	switch {
	case i <= 2:
		return _OpticalFlowGridSizeFlagBitsNV_name_0[_OpticalFlowGridSizeFlagBitsNV_index_0[i]:_OpticalFlowGridSizeFlagBitsNV_index_0[i+1]]
	case i == 4:
		return _OpticalFlowGridSizeFlagBitsNV_name_1
	case i == 8:
		return _OpticalFlowGridSizeFlagBitsNV_name_2
	default:
		return "OpticalFlowGridSizeFlagBitsNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV-0]
	_ = x[OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV-1]
	_ = x[OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV-2]
	_ = x[OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV-3]
}

const _OpticalFlowPerformanceLevelNV_name = "OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NVOPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NVOPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NVOPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV"

var _OpticalFlowPerformanceLevelNV_index = [...]uint8{0, 41, 79, 119, 157}

func (i OpticalFlowPerformanceLevelNV) String() string {
	if i < 0 || i >= OpticalFlowPerformanceLevelNV(len(_OpticalFlowPerformanceLevelNV_index)-1) {
		return "OpticalFlowPerformanceLevelNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpticalFlowPerformanceLevelNV_name[_OpticalFlowPerformanceLevelNV_index[i]:_OpticalFlowPerformanceLevelNV_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV-0]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV-1]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV-2]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV-3]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV-4]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV-5]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV-6]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV-7]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV-8]
}

const _OpticalFlowSessionBindingPointNV_name = "OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NVOPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NVOPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NVOPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NVOPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NVOPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NVOPTICAL_FLOW_SESSION_BINDING_POINT_COST_NVOPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NVOPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV"

var _OpticalFlowSessionBindingPointNV_index = [...]uint16{0, 45, 88, 135, 177, 226, 284, 326, 377, 426}

func (i OpticalFlowSessionBindingPointNV) String() string {
	if i < 0 || i >= OpticalFlowSessionBindingPointNV(len(_OpticalFlowSessionBindingPointNV_index)-1) {
		return "OpticalFlowSessionBindingPointNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpticalFlowSessionBindingPointNV_name[_OpticalFlowSessionBindingPointNV_index[i]:_OpticalFlowSessionBindingPointNV_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV-1]
	_ = x[OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV-2]
	_ = x[OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV-4]
	_ = x[OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV-8]
	_ = x[OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV-16]
}

const (
	_OpticalFlowSessionCreateFlagBitsNV_name_0 = "OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NVOPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV"
	_OpticalFlowSessionCreateFlagBitsNV_name_1 = "OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV"
	_OpticalFlowSessionCreateFlagBitsNV_name_2 = "OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV"
	_OpticalFlowSessionCreateFlagBitsNV_name_3 = "OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV"
)

var (
	_OpticalFlowSessionCreateFlagBitsNV_index_0 = [...]uint8{0, 46, 92}
)

func (i OpticalFlowSessionCreateFlagBitsNV) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _OpticalFlowSessionCreateFlagBitsNV_name_0[_OpticalFlowSessionCreateFlagBitsNV_index_0[i]:_OpticalFlowSessionCreateFlagBitsNV_index_0[i+1]]
	case i == 4:
		return _OpticalFlowSessionCreateFlagBitsNV_name_1
	case i == 8:
		return _OpticalFlowSessionCreateFlagBitsNV_name_2
	case i == 16:
		return _OpticalFlowSessionCreateFlagBitsNV_name_3
	default:
		return "OpticalFlowSessionCreateFlagBitsNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPTICAL_FLOW_USAGE_UNKNOWN_NV-0]
	_ = x[OPTICAL_FLOW_USAGE_INPUT_BIT_NV-1]
	_ = x[OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV-2]
	_ = x[OPTICAL_FLOW_USAGE_HINT_BIT_NV-4]
	_ = x[OPTICAL_FLOW_USAGE_COST_BIT_NV-8]
	_ = x[OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV-16]
}

const (
	_OpticalFlowUsageFlagBitsNV_name_0 = "OPTICAL_FLOW_USAGE_UNKNOWN_NVOPTICAL_FLOW_USAGE_INPUT_BIT_NVOPTICAL_FLOW_USAGE_OUTPUT_BIT_NV"
	_OpticalFlowUsageFlagBitsNV_name_1 = "OPTICAL_FLOW_USAGE_HINT_BIT_NV"
	_OpticalFlowUsageFlagBitsNV_name_2 = "OPTICAL_FLOW_USAGE_COST_BIT_NV"
	_OpticalFlowUsageFlagBitsNV_name_3 = "OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV"
)

var (
	_OpticalFlowUsageFlagBitsNV_index_0 = [...]uint8{0, 29, 60, 92}
)

func (i OpticalFlowUsageFlagBitsNV) String() string {
	switch {
	case i <= 2:
		return _OpticalFlowUsageFlagBitsNV_name_0[_OpticalFlowUsageFlagBitsNV_index_0[i]:_OpticalFlowUsageFlagBitsNV_index_0[i+1]]
	case i == 4:
		return _OpticalFlowUsageFlagBitsNV_name_1
	case i == 8:
		return _OpticalFlowUsageFlagBitsNV_name_2
	case i == 16:
		return _OpticalFlowUsageFlagBitsNV_name_3
	default:
		return "OpticalFlowUsageFlagBitsNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OUT_OF_BAND_QUEUE_TYPE_RENDER_NV-0]
	_ = x[OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV-1]
}

const _OutOfBandQueueTypeNV_name = "OUT_OF_BAND_QUEUE_TYPE_RENDER_NVOUT_OF_BAND_QUEUE_TYPE_PRESENT_NV"

var _OutOfBandQueueTypeNV_index = [...]uint8{0, 32, 65}

func (i OutOfBandQueueTypeNV) String() string {
	if i < 0 || i >= OutOfBandQueueTypeNV(len(_OutOfBandQueueTypeNV_index)-1) {
		return "OutOfBandQueueTypeNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OutOfBandQueueTypeNV_name[_OutOfBandQueueTypeNV_index[i]:_OutOfBandQueueTypeNV_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PEER_MEMORY_FEATURE_COPY_SRC_BIT-1]
	_ = x[PEER_MEMORY_FEATURE_COPY_DST_BIT-2]
	_ = x[PEER_MEMORY_FEATURE_GENERIC_SRC_BIT-4]
	_ = x[PEER_MEMORY_FEATURE_GENERIC_DST_BIT-8]
	_ = x[PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR-2]
	_ = x[PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR-1]
	_ = x[PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR-8]
	_ = x[PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR-4]
}

const (
	_PeerMemoryFeatureFlagBits_name_0 = "PEER_MEMORY_FEATURE_COPY_SRC_BITPEER_MEMORY_FEATURE_COPY_DST_BIT"
	_PeerMemoryFeatureFlagBits_name_1 = "PEER_MEMORY_FEATURE_GENERIC_SRC_BIT"
	_PeerMemoryFeatureFlagBits_name_2 = "PEER_MEMORY_FEATURE_GENERIC_DST_BIT"
)

var (
	_PeerMemoryFeatureFlagBits_index_0 = [...]uint8{0, 32, 64}
)

func (i PeerMemoryFeatureFlagBits) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _PeerMemoryFeatureFlagBits_name_0[_PeerMemoryFeatureFlagBits_index_0[i]:_PeerMemoryFeatureFlagBits_index_0[i+1]]
	case i == 4:
		return _PeerMemoryFeatureFlagBits_name_1
	case i == 8:
		return _PeerMemoryFeatureFlagBits_name_2
	default:
		return "PeerMemoryFeatureFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL-0]
}

const _PerformanceConfigurationTypeINTEL_name = "PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL"

var _PerformanceConfigurationTypeINTEL_index = [...]uint8{0, 78}

func (i PerformanceConfigurationTypeINTEL) String() string {
	if i < 0 || i >= PerformanceConfigurationTypeINTEL(len(_PerformanceConfigurationTypeINTEL_index)-1) {
		return "PerformanceConfigurationTypeINTEL(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PerformanceConfigurationTypeINTEL_name[_PerformanceConfigurationTypeINTEL_index[i]:_PerformanceConfigurationTypeINTEL_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR-1]
	_ = x[PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR-2]
	_ = x[PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR-2]
	_ = x[PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR-1]
}

const _PerformanceCounterDescriptionFlagBitsKHR_name = "PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHRPERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR"

var _PerformanceCounterDescriptionFlagBitsKHR_index = [...]uint8{0, 61, 122}

func (i PerformanceCounterDescriptionFlagBitsKHR) String() string {
	i -= 1
	if i >= PerformanceCounterDescriptionFlagBitsKHR(len(_PerformanceCounterDescriptionFlagBitsKHR_index)-1) {
		return "PerformanceCounterDescriptionFlagBitsKHR(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _PerformanceCounterDescriptionFlagBitsKHR_name[_PerformanceCounterDescriptionFlagBitsKHR_index[i]:_PerformanceCounterDescriptionFlagBitsKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR-0]
	_ = x[PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR-1]
	_ = x[PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR-2]
	_ = x[QUERY_SCOPE_COMMAND_BUFFER_KHR-0]
	_ = x[QUERY_SCOPE_COMMAND_KHR-2]
	_ = x[QUERY_SCOPE_RENDER_PASS_KHR-1]
}

const _PerformanceCounterScopeKHR_name = "PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHRPERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHRPERFORMANCE_COUNTER_SCOPE_COMMAND_KHR"

var _PerformanceCounterScopeKHR_index = [...]uint8{0, 44, 85, 122}

func (i PerformanceCounterScopeKHR) String() string {
	if i < 0 || i >= PerformanceCounterScopeKHR(len(_PerformanceCounterScopeKHR_index)-1) {
		return "PerformanceCounterScopeKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PerformanceCounterScopeKHR_name[_PerformanceCounterScopeKHR_index[i]:_PerformanceCounterScopeKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PERFORMANCE_COUNTER_STORAGE_INT32_KHR-0]
	_ = x[PERFORMANCE_COUNTER_STORAGE_INT64_KHR-1]
	_ = x[PERFORMANCE_COUNTER_STORAGE_UINT32_KHR-2]
	_ = x[PERFORMANCE_COUNTER_STORAGE_UINT64_KHR-3]
	_ = x[PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR-4]
	_ = x[PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR-5]
}

const _PerformanceCounterStorageKHR_name = "PERFORMANCE_COUNTER_STORAGE_INT32_KHRPERFORMANCE_COUNTER_STORAGE_INT64_KHRPERFORMANCE_COUNTER_STORAGE_UINT32_KHRPERFORMANCE_COUNTER_STORAGE_UINT64_KHRPERFORMANCE_COUNTER_STORAGE_FLOAT32_KHRPERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR"

var _PerformanceCounterStorageKHR_index = [...]uint8{0, 37, 74, 112, 150, 189, 228}

func (i PerformanceCounterStorageKHR) String() string {
	if i < 0 || i >= PerformanceCounterStorageKHR(len(_PerformanceCounterStorageKHR_index)-1) {
		return "PerformanceCounterStorageKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PerformanceCounterStorageKHR_name[_PerformanceCounterStorageKHR_index[i]:_PerformanceCounterStorageKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PERFORMANCE_COUNTER_UNIT_GENERIC_KHR-0]
	_ = x[PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR-1]
	_ = x[PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR-2]
	_ = x[PERFORMANCE_COUNTER_UNIT_BYTES_KHR-3]
	_ = x[PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR-4]
	_ = x[PERFORMANCE_COUNTER_UNIT_KELVIN_KHR-5]
	_ = x[PERFORMANCE_COUNTER_UNIT_WATTS_KHR-6]
	_ = x[PERFORMANCE_COUNTER_UNIT_VOLTS_KHR-7]
	_ = x[PERFORMANCE_COUNTER_UNIT_AMPS_KHR-8]
	_ = x[PERFORMANCE_COUNTER_UNIT_HERTZ_KHR-9]
	_ = x[PERFORMANCE_COUNTER_UNIT_CYCLES_KHR-10]
}

const _PerformanceCounterUnitKHR_name = "PERFORMANCE_COUNTER_UNIT_GENERIC_KHRPERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHRPERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHRPERFORMANCE_COUNTER_UNIT_BYTES_KHRPERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHRPERFORMANCE_COUNTER_UNIT_KELVIN_KHRPERFORMANCE_COUNTER_UNIT_WATTS_KHRPERFORMANCE_COUNTER_UNIT_VOLTS_KHRPERFORMANCE_COUNTER_UNIT_AMPS_KHRPERFORMANCE_COUNTER_UNIT_HERTZ_KHRPERFORMANCE_COUNTER_UNIT_CYCLES_KHR"

var _PerformanceCounterUnitKHR_index = [...]uint16{0, 36, 75, 115, 149, 194, 229, 263, 297, 330, 364, 399}

func (i PerformanceCounterUnitKHR) String() string {
	if i < 0 || i >= PerformanceCounterUnitKHR(len(_PerformanceCounterUnitKHR_index)-1) {
		return "PerformanceCounterUnitKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PerformanceCounterUnitKHR_name[_PerformanceCounterUnitKHR_index[i]:_PerformanceCounterUnitKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL-0]
	_ = x[PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL-1]
}

const _PerformanceOverrideTypeINTEL_name = "PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTELPERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL"

var _PerformanceOverrideTypeINTEL_index = [...]uint8{0, 45, 93}

func (i PerformanceOverrideTypeINTEL) String() string {
	if i < 0 || i >= PerformanceOverrideTypeINTEL(len(_PerformanceOverrideTypeINTEL_index)-1) {
		return "PerformanceOverrideTypeINTEL(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PerformanceOverrideTypeINTEL_name[_PerformanceOverrideTypeINTEL_index[i]:_PerformanceOverrideTypeINTEL_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL-0]
	_ = x[PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL-1]
}

const _PerformanceParameterTypeINTEL_name = "PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTELPERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL"

var _PerformanceParameterTypeINTEL_index = [...]uint8{0, 54, 111}

func (i PerformanceParameterTypeINTEL) String() string {
	if i < 0 || i >= PerformanceParameterTypeINTEL(len(_PerformanceParameterTypeINTEL_index)-1) {
		return "PerformanceParameterTypeINTEL(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PerformanceParameterTypeINTEL_name[_PerformanceParameterTypeINTEL_index[i]:_PerformanceParameterTypeINTEL_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PERFORMANCE_VALUE_TYPE_UINT32_INTEL-0]
	_ = x[PERFORMANCE_VALUE_TYPE_UINT64_INTEL-1]
	_ = x[PERFORMANCE_VALUE_TYPE_FLOAT_INTEL-2]
	_ = x[PERFORMANCE_VALUE_TYPE_BOOL_INTEL-3]
	_ = x[PERFORMANCE_VALUE_TYPE_STRING_INTEL-4]
}

const _PerformanceValueTypeINTEL_name = "PERFORMANCE_VALUE_TYPE_UINT32_INTELPERFORMANCE_VALUE_TYPE_UINT64_INTELPERFORMANCE_VALUE_TYPE_FLOAT_INTELPERFORMANCE_VALUE_TYPE_BOOL_INTELPERFORMANCE_VALUE_TYPE_STRING_INTEL"

var _PerformanceValueTypeINTEL_index = [...]uint8{0, 35, 70, 104, 137, 172}

func (i PerformanceValueTypeINTEL) String() string {
	if i < 0 || i >= PerformanceValueTypeINTEL(len(_PerformanceValueTypeINTEL_index)-1) {
		return "PerformanceValueTypeINTEL(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PerformanceValueTypeINTEL_name[_PerformanceValueTypeINTEL_index[i]:_PerformanceValueTypeINTEL_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM-1]
}

const _PhysicalDeviceSchedulingControlsFlagBitsARM_name = "PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM"

var _PhysicalDeviceSchedulingControlsFlagBitsARM_index = [...]uint8{0, 57}

func (i PhysicalDeviceSchedulingControlsFlagBitsARM) String() string {
	i -= 1
	if i >= PhysicalDeviceSchedulingControlsFlagBitsARM(len(_PhysicalDeviceSchedulingControlsFlagBitsARM_index)-1) {
		return "PhysicalDeviceSchedulingControlsFlagBitsARM(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _PhysicalDeviceSchedulingControlsFlagBitsARM_name[_PhysicalDeviceSchedulingControlsFlagBitsARM_index[i]:_PhysicalDeviceSchedulingControlsFlagBitsARM_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PHYSICAL_DEVICE_TYPE_OTHER-0]
	_ = x[PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU-1]
	_ = x[PHYSICAL_DEVICE_TYPE_DISCRETE_GPU-2]
	_ = x[PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU-3]
	_ = x[PHYSICAL_DEVICE_TYPE_CPU-4]
}

const _PhysicalDeviceType_name = "PHYSICAL_DEVICE_TYPE_OTHERPHYSICAL_DEVICE_TYPE_INTEGRATED_GPUPHYSICAL_DEVICE_TYPE_DISCRETE_GPUPHYSICAL_DEVICE_TYPE_VIRTUAL_GPUPHYSICAL_DEVICE_TYPE_CPU"

var _PhysicalDeviceType_index = [...]uint8{0, 26, 61, 94, 126, 150}

func (i PhysicalDeviceType) String() string {
	if i < 0 || i >= PhysicalDeviceType(len(_PhysicalDeviceType_index)-1) {
		return "PhysicalDeviceType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PhysicalDeviceType_name[_PhysicalDeviceType_index[i]:_PhysicalDeviceType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PIPELINE_BIND_POINT_GRAPHICS-0]
	_ = x[PIPELINE_BIND_POINT_COMPUTE-1]
	_ = x[PIPELINE_BIND_POINT_RAY_TRACING_KHR-1000347000]
	_ = x[PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI-1000369003]
	_ = x[PIPELINE_BIND_POINT_RAY_TRACING_NV-1000347000]
}

const (
	_PipelineBindPoint_name_0 = "PIPELINE_BIND_POINT_GRAPHICSPIPELINE_BIND_POINT_COMPUTE"
	_PipelineBindPoint_name_1 = "PIPELINE_BIND_POINT_RAY_TRACING_KHR"
	_PipelineBindPoint_name_2 = "PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI"
)

var (
	_PipelineBindPoint_index_0 = [...]uint8{0, 28, 55}
)

func (i PipelineBindPoint) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _PipelineBindPoint_name_0[_PipelineBindPoint_index_0[i]:_PipelineBindPoint_index_0[i+1]]
	case i == 1000347000:
		return _PipelineBindPoint_name_1
	case i == 1000369003:
		return _PipelineBindPoint_name_2
	default:
		return "PipelineBindPoint(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT-1]
	_ = x[PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT-1]
}

const _PipelineCacheCreateFlagBits_name = "PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT"

var _PipelineCacheCreateFlagBits_index = [...]uint8{0, 49}

func (i PipelineCacheCreateFlagBits) String() string {
	i -= 1
	if i >= PipelineCacheCreateFlagBits(len(_PipelineCacheCreateFlagBits_index)-1) {
		return "PipelineCacheCreateFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _PipelineCacheCreateFlagBits_name[_PipelineCacheCreateFlagBits_index[i]:_PipelineCacheCreateFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PIPELINE_CACHE_HEADER_VERSION_ONE-1]
}

const _PipelineCacheHeaderVersion_name = "PIPELINE_CACHE_HEADER_VERSION_ONE"

var _PipelineCacheHeaderVersion_index = [...]uint8{0, 33}

func (i PipelineCacheHeaderVersion) String() string {
	i -= 1
	if i < 0 || i >= PipelineCacheHeaderVersion(len(_PipelineCacheHeaderVersion_index)-1) {
		return "PipelineCacheHeaderVersion(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _PipelineCacheHeaderVersion_name[_PipelineCacheHeaderVersion_index[i]:_PipelineCacheHeaderVersion_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT-1000463000]
	_ = x[PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM-1000463000]
}

const _PipelineColorBlendStateCreateFlagBits_name = "PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT"

var _PipelineColorBlendStateCreateFlagBits_index = [...]uint8{0, 79}

func (i PipelineColorBlendStateCreateFlagBits) String() string {
	i -= 1000463000
	if i >= PipelineColorBlendStateCreateFlagBits(len(_PipelineColorBlendStateCreateFlagBits_index)-1) {
		return "PipelineColorBlendStateCreateFlagBits(" + strconv.FormatInt(int64(i+1000463000), 10) + ")"
	}
	return _PipelineColorBlendStateCreateFlagBits_name[_PipelineColorBlendStateCreateFlagBits_index[i]:_PipelineColorBlendStateCreateFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT-1]
	_ = x[PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT-2]
	_ = x[PIPELINE_CREATE_DERIVATIVE_BIT-4]
	_ = x[PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT-8]
	_ = x[PIPELINE_CREATE_DISPATCH_BASE_BIT-16]
	_ = x[PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT-256]
	_ = x[PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT-512]
	_ = x[PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR-1000044000]
	_ = x[PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT-1000044000]
	_ = x[PIPELINE_CREATE_DEFER_COMPILE_BIT_NV-1000165000]
	_ = x[PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR-1000269000]
	_ = x[PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR-1000269000]
	_ = x[PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV-1000277000]
	_ = x[PIPELINE_CREATE_LIBRARY_BIT_KHR-1000290000]
	_ = x[PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT-1000316000]
	_ = x[PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT-1000320000]
	_ = x[PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT-1000320000]
	_ = x[PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV-1000327000]
	_ = x[PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT-1000339000]
	_ = x[PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT-1000339000]
	_ = x[PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR-1000347000]
	_ = x[PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR-1000347000]
	_ = x[PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR-1000347000]
	_ = x[PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR-1000347000]
	_ = x[PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR-1000347000]
	_ = x[PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR-1000347000]
	_ = x[PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR-1000347000]
	_ = x[PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT-1000396000]
	_ = x[PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT-1000466000]
	_ = x[PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT-1000466000]
	_ = x[PIPELINE_CREATE_DISPATCH_BASE_KHR-16]
	_ = x[PIPELINE_CREATE_DISPATCH_BASE-16]
	_ = x[PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT-512]
	_ = x[PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT-256]
	_ = x[PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT-1000044000]
	_ = x[PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR-1000044000]
	_ = x[PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR-8]
}

const _PipelineCreateFlagBits_name = "PIPELINE_CREATE_DISABLE_OPTIMIZATION_BITPIPELINE_CREATE_ALLOW_DERIVATIVES_BITPIPELINE_CREATE_DERIVATIVE_BITPIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BITPIPELINE_CREATE_DISPATCH_BASE_BITPIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BITPIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BITPIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHRPIPELINE_CREATE_DEFER_COMPILE_BIT_NVPIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHRPIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NVPIPELINE_CREATE_LIBRARY_BIT_KHRPIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXTPIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXTPIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NVPIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXTPIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHRPIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXTPIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT"

var _PipelineCreateFlagBits_map = map[PipelineCreateFlagBits]string{
	1:          _PipelineCreateFlagBits_name[0:40],
	2:          _PipelineCreateFlagBits_name[40:77],
	4:          _PipelineCreateFlagBits_name[77:107],
	8:          _PipelineCreateFlagBits_name[107:155],
	16:         _PipelineCreateFlagBits_name[155:188],
	256:        _PipelineCreateFlagBits_name[188:241],
	512:        _PipelineCreateFlagBits_name[241:284],
	1000044000: _PipelineCreateFlagBits_name[284:350],
	1000165000: _PipelineCreateFlagBits_name[350:386],
	1000269000: _PipelineCreateFlagBits_name[386:442],
	1000277000: _PipelineCreateFlagBits_name[442:482],
	1000290000: _PipelineCreateFlagBits_name[482:513],
	1000316000: _PipelineCreateFlagBits_name[513:554],
	1000320000: _PipelineCreateFlagBits_name[554:612],
	1000327000: _PipelineCreateFlagBits_name[612:659],
	1000339000: _PipelineCreateFlagBits_name[659:713],
	1000347000: _PipelineCreateFlagBits_name[713:772],
	1000396000: _PipelineCreateFlagBits_name[772:824],
	1000466000: _PipelineCreateFlagBits_name[824:867],
}

func (i PipelineCreateFlagBits) String() string {
	if str, ok := _PipelineCreateFlagBits_map[i]; ok {
		return str
	}
	return "PipelineCreateFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR-1]
	_ = x[PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR-2]
	_ = x[PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR-4]
	_ = x[PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT-1000470000]
	_ = x[PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT-1000470000]
	_ = x[PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT-1000470000]
	_ = x[PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT-1000470000]
	_ = x[PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV-1000470000]
	_ = x[PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV-1000470000]
	_ = x[PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT-1000470000]
	_ = x[PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV-1000470000]
	_ = x[PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT-1000470000]
	_ = x[PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT-1000470000]
	_ = x[PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT-1000470000]
	_ = x[PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT-1000470000]
	_ = x[PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV-1000470000]
	_ = x[PIPELINE_CREATE_2_LIBRARY_BIT_KHR-1000470000]
	_ = x[PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR-1000470000]
}

const (
	_PipelineCreateFlagBits2KHR_name_0 = "PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHRPIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR"
	_PipelineCreateFlagBits2KHR_name_1 = "PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR"
	_PipelineCreateFlagBits2KHR_name_2 = "PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR"
)

var (
	_PipelineCreateFlagBits2KHR_index_0 = [...]uint8{0, 46, 89}
)

func (i PipelineCreateFlagBits2KHR) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _PipelineCreateFlagBits2KHR_name_0[_PipelineCreateFlagBits2KHR_index_0[i]:_PipelineCreateFlagBits2KHR_index_0[i+1]]
	case i == 4:
		return _PipelineCreateFlagBits2KHR_name_1
	case i == 1000470000:
		return _PipelineCreateFlagBits2KHR_name_2
	default:
		return "PipelineCreateFlagBits2KHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PIPELINE_CREATION_FEEDBACK_VALID_BIT-1]
	_ = x[PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT-2]
	_ = x[PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT-4]
	_ = x[PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT-2]
	_ = x[PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT-4]
	_ = x[PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT-1]
}

const (
	_PipelineCreationFeedbackFlagBits_name_0 = "PIPELINE_CREATION_FEEDBACK_VALID_BITPIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT"
	_PipelineCreationFeedbackFlagBits_name_1 = "PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT"
)

var (
	_PipelineCreationFeedbackFlagBits_index_0 = [...]uint8{0, 36, 97}
)

func (i PipelineCreationFeedbackFlagBits) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _PipelineCreationFeedbackFlagBits_name_0[_PipelineCreationFeedbackFlagBits_index_0[i]:_PipelineCreationFeedbackFlagBits_index_0[i+1]]
	case i == 4:
		return _PipelineCreationFeedbackFlagBits_name_1
	default:
		return "PipelineCreationFeedbackFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT-1000463000]
	_ = x[PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT-1000463000]
	_ = x[PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM-1000463000]
	_ = x[PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM-1000463000]
}

const _PipelineDepthStencilStateCreateFlagBits_name = "PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT"

var _PipelineDepthStencilStateCreateFlagBits_index = [...]uint8{0, 89}

func (i PipelineDepthStencilStateCreateFlagBits) String() string {
	i -= 1000463000
	if i >= PipelineDepthStencilStateCreateFlagBits(len(_PipelineDepthStencilStateCreateFlagBits_index)-1) {
		return "PipelineDepthStencilStateCreateFlagBits(" + strconv.FormatInt(int64(i+1000463000), 10) + ")"
	}
	return _PipelineDepthStencilStateCreateFlagBits_name[_PipelineDepthStencilStateCreateFlagBits_index[i]:_PipelineDepthStencilStateCreateFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR-0]
	_ = x[PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR-1]
	_ = x[PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR-2]
	_ = x[PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR-3]
}

const _PipelineExecutableStatisticFormatKHR_name = "PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHRPIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHRPIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHRPIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR"

var _PipelineExecutableStatisticFormatKHR_index = [...]uint8{0, 47, 93, 140, 188}

func (i PipelineExecutableStatisticFormatKHR) String() string {
	if i < 0 || i >= PipelineExecutableStatisticFormatKHR(len(_PipelineExecutableStatisticFormatKHR_index)-1) {
		return "PipelineExecutableStatisticFormatKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PipelineExecutableStatisticFormatKHR_name[_PipelineExecutableStatisticFormatKHR_index[i]:_PipelineExecutableStatisticFormatKHR_index[i+1]]
}
