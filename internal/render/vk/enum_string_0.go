// Code generated by "stringer -output=enum_string_0.go -type=AccelerationStructureBuildTypeKHR,AccelerationStructureCompatibilityKHR,AccelerationStructureCreateFlagBitsKHR,AccelerationStructureMemoryRequirementsTypeNV,AccelerationStructureMotionInstanceTypeNV,AccelerationStructureTypeKHR,AccessFlagBits,AccessFlagBits2KHR,AttachmentDescriptionFlagBits,AttachmentLoadOp,AttachmentStoreOp,BlendFactor,BlendOp,BlendOverlapEXT,BorderColor,BufferCreateFlagBits,BufferUsageFlagBits,BuildAccelerationStructureFlagBitsKHR,BuildAccelerationStructureModeKHR,ChromaLocation,CoarseSampleOrderTypeNV,ColorComponentFlagBits,ColorSpaceKHR,CommandBufferLevel,CommandBufferResetFlagBits,CommandBufferUsageFlagBits,CommandPoolCreateFlagBits,CommandPoolResetFlagBits,CompareOp,ComponentSwizzle,ComponentTypeNV"; DO NOT EDIT.

package vk

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR-0]
	_ = x[ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR-1]
	_ = x[ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR-2]
}

const _AccelerationStructureBuildTypeKHR_name = "ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHRACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHRACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR"

var _AccelerationStructureBuildTypeKHR_index = [...]uint8{0, 42, 86, 138}

func (i AccelerationStructureBuildTypeKHR) String() string {
	if i < 0 || i >= AccelerationStructureBuildTypeKHR(len(_AccelerationStructureBuildTypeKHR_index)-1) {
		return "AccelerationStructureBuildTypeKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AccelerationStructureBuildTypeKHR_name[_AccelerationStructureBuildTypeKHR_index[i]:_AccelerationStructureBuildTypeKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR-0]
	_ = x[ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR-1]
}

const _AccelerationStructureCompatibilityKHR_name = "ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHRACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR"

var _AccelerationStructureCompatibilityKHR_index = [...]uint8{0, 51, 104}

func (i AccelerationStructureCompatibilityKHR) String() string {
	if i < 0 || i >= AccelerationStructureCompatibilityKHR(len(_AccelerationStructureCompatibilityKHR_index)-1) {
		return "AccelerationStructureCompatibilityKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AccelerationStructureCompatibilityKHR_name[_AccelerationStructureCompatibilityKHR_index[i]:_AccelerationStructureCompatibilityKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR-1]
	_ = x[ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV-1000327000]
}

const (
	_AccelerationStructureCreateFlagBitsKHR_name_0 = "ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR"
	_AccelerationStructureCreateFlagBitsKHR_name_1 = "ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV"
)

func (i AccelerationStructureCreateFlagBitsKHR) String() string {
	switch {
	case i == 1:
		return _AccelerationStructureCreateFlagBitsKHR_name_0
	case i == 1000327000:
		return _AccelerationStructureCreateFlagBitsKHR_name_1
	default:
		return "AccelerationStructureCreateFlagBitsKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV-0]
	_ = x[ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV-1]
	_ = x[ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV-2]
}

const _AccelerationStructureMemoryRequirementsTypeNV_name = "ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NVACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NVACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV"

var _AccelerationStructureMemoryRequirementsTypeNV_index = [...]uint8{0, 57, 121, 186}

func (i AccelerationStructureMemoryRequirementsTypeNV) String() string {
	if i < 0 || i >= AccelerationStructureMemoryRequirementsTypeNV(len(_AccelerationStructureMemoryRequirementsTypeNV_index)-1) {
		return "AccelerationStructureMemoryRequirementsTypeNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AccelerationStructureMemoryRequirementsTypeNV_name[_AccelerationStructureMemoryRequirementsTypeNV_index[i]:_AccelerationStructureMemoryRequirementsTypeNV_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV-0]
	_ = x[ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV-1]
	_ = x[ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV-2]
}

const _AccelerationStructureMotionInstanceTypeNV_name = "ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NVACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NVACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV"

var _AccelerationStructureMotionInstanceTypeNV_index = [...]uint8{0, 53, 113, 170}

func (i AccelerationStructureMotionInstanceTypeNV) String() string {
	if i < 0 || i >= AccelerationStructureMotionInstanceTypeNV(len(_AccelerationStructureMotionInstanceTypeNV_index)-1) {
		return "AccelerationStructureMotionInstanceTypeNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AccelerationStructureMotionInstanceTypeNV_name[_AccelerationStructureMotionInstanceTypeNV_index[i]:_AccelerationStructureMotionInstanceTypeNV_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR-0]
	_ = x[ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR-1]
	_ = x[ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR-2]
	_ = x[ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV-1]
	_ = x[ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV-0]
}

const _AccelerationStructureTypeKHR_name = "ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHRACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHRACCELERATION_STRUCTURE_TYPE_GENERIC_KHR"

var _AccelerationStructureTypeKHR_index = [...]uint8{0, 41, 85, 124}

func (i AccelerationStructureTypeKHR) String() string {
	if i < 0 || i >= AccelerationStructureTypeKHR(len(_AccelerationStructureTypeKHR_index)-1) {
		return "AccelerationStructureTypeKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AccelerationStructureTypeKHR_name[_AccelerationStructureTypeKHR_index[i]:_AccelerationStructureTypeKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ACCESS_INDIRECT_COMMAND_READ_BIT-1]
	_ = x[ACCESS_INDEX_READ_BIT-2]
	_ = x[ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT-1024]
	_ = x[ACCESS_TRANSFER_READ_BIT-2048]
	_ = x[ACCESS_TRANSFER_WRITE_BIT-4096]
	_ = x[ACCESS_HOST_READ_BIT-8192]
	_ = x[ACCESS_HOST_WRITE_BIT-16384]
	_ = x[ACCESS_MEMORY_READ_BIT-32768]
	_ = x[ACCESS_MEMORY_WRITE_BIT-65536]
	_ = x[ACCESS_VERTEX_ATTRIBUTE_READ_BIT-4]
	_ = x[ACCESS_UNIFORM_READ_BIT-8]
	_ = x[ACCESS_INPUT_ATTACHMENT_READ_BIT-16]
	_ = x[ACCESS_SHADER_READ_BIT-32]
	_ = x[ACCESS_SHADER_WRITE_BIT-64]
	_ = x[ACCESS_COLOR_ATTACHMENT_READ_BIT-128]
	_ = x[ACCESS_COLOR_ATTACHMENT_WRITE_BIT-256]
	_ = x[ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT-512]
	_ = x[ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT-1000028000]
	_ = x[ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT-1000028000]
	_ = x[ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT-1000028000]
	_ = x[ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT-1000081000]
	_ = x[ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT-1000148000]
	_ = x[ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR-1000150000]
	_ = x[ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR-1000150000]
	_ = x[ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT-1000218000]
	_ = x[ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR-1000226000]
	_ = x[ACCESS_COMMAND_PREPROCESS_READ_BIT_NV-1000277000]
	_ = x[ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV-1000277000]
	_ = x[ACCESS_NONE_KHR-1000314000]
	_ = x[ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV-1000150000]
	_ = x[ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV-1000150000]
	_ = x[ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV-1000226000]
}

const _AccessFlagBits_name = "ACCESS_INDIRECT_COMMAND_READ_BITACCESS_INDEX_READ_BITACCESS_VERTEX_ATTRIBUTE_READ_BITACCESS_UNIFORM_READ_BITACCESS_INPUT_ATTACHMENT_READ_BITACCESS_SHADER_READ_BITACCESS_SHADER_WRITE_BITACCESS_COLOR_ATTACHMENT_READ_BITACCESS_COLOR_ATTACHMENT_WRITE_BITACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BITACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BITACCESS_TRANSFER_READ_BITACCESS_TRANSFER_WRITE_BITACCESS_HOST_READ_BITACCESS_HOST_WRITE_BITACCESS_MEMORY_READ_BITACCESS_MEMORY_WRITE_BITACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXTACCESS_CONDITIONAL_RENDERING_READ_BIT_EXTACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXTACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHRACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXTACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHRACCESS_COMMAND_PREPROCESS_READ_BIT_NVACCESS_NONE_KHR"

var _AccessFlagBits_map = map[AccessFlagBits]string{
	1:          _AccessFlagBits_name[0:32],
	2:          _AccessFlagBits_name[32:53],
	4:          _AccessFlagBits_name[53:85],
	8:          _AccessFlagBits_name[85:108],
	16:         _AccessFlagBits_name[108:140],
	32:         _AccessFlagBits_name[140:162],
	64:         _AccessFlagBits_name[162:185],
	128:        _AccessFlagBits_name[185:217],
	256:        _AccessFlagBits_name[217:250],
	512:        _AccessFlagBits_name[250:290],
	1024:       _AccessFlagBits_name[290:331],
	2048:       _AccessFlagBits_name[331:355],
	4096:       _AccessFlagBits_name[355:380],
	8192:       _AccessFlagBits_name[380:400],
	16384:      _AccessFlagBits_name[400:421],
	32768:      _AccessFlagBits_name[421:443],
	65536:      _AccessFlagBits_name[443:466],
	1000028000: _AccessFlagBits_name[466:505],
	1000081000: _AccessFlagBits_name[505:546],
	1000148000: _AccessFlagBits_name[546:594],
	1000150000: _AccessFlagBits_name[594:636],
	1000218000: _AccessFlagBits_name[636:676],
	1000226000: _AccessFlagBits_name[676:728],
	1000277000: _AccessFlagBits_name[728:765],
	1000314000: _AccessFlagBits_name[765:780],
}

func (i AccessFlagBits) String() string {
	if str, ok := _AccessFlagBits_map[i]; ok {
		return str
	}
	return "AccessFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ACCESS_2_NONE_KHR-0]
	_ = x[ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR-1]
	_ = x[ACCESS_2_INDEX_READ_BIT_KHR-2]
	_ = x[ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR-1024]
	_ = x[ACCESS_2_TRANSFER_READ_BIT_KHR-2048]
	_ = x[ACCESS_2_TRANSFER_WRITE_BIT_KHR-4096]
	_ = x[ACCESS_2_HOST_READ_BIT_KHR-8192]
	_ = x[ACCESS_2_HOST_WRITE_BIT_KHR-16384]
	_ = x[ACCESS_2_MEMORY_READ_BIT_KHR-32768]
	_ = x[ACCESS_2_MEMORY_WRITE_BIT_KHR-65536]
	_ = x[ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR-4]
	_ = x[ACCESS_2_UNIFORM_READ_BIT_KHR-8]
	_ = x[ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR-4294967296]
	_ = x[ACCESS_2_SHADER_STORAGE_READ_BIT_KHR-8589934592]
	_ = x[ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR-17179869184]
	_ = x[ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR-16]
	_ = x[ACCESS_2_SHADER_READ_BIT_KHR-32]
	_ = x[ACCESS_2_SHADER_WRITE_BIT_KHR-64]
	_ = x[ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR-128]
	_ = x[ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR-256]
	_ = x[ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR-512]
	_ = x[ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT-1000314000]
	_ = x[ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT-1000314000]
	_ = x[ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV-1000314000]
	_ = x[ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT-1000314000]
	_ = x[ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT-1000314000]
	_ = x[ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR-1000314000]
	_ = x[ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR-1000314000]
	_ = x[ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR-1000314000]
	_ = x[ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT-1000314000]
	_ = x[ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT-1000314000]
	_ = x[ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV-1000314000]
	_ = x[ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI-1000370000]
	_ = x[ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV-1000314000]
	_ = x[ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV-1000314000]
	_ = x[ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV-1000314000]
}

const _AccessFlagBits2KHR_name = "ACCESS_2_NONE_KHRACCESS_2_INDIRECT_COMMAND_READ_BIT_KHRACCESS_2_INDEX_READ_BIT_KHRACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHRACCESS_2_UNIFORM_READ_BIT_KHRACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHRACCESS_2_SHADER_READ_BIT_KHRACCESS_2_SHADER_WRITE_BIT_KHRACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHRACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHRACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHRACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHRACCESS_2_TRANSFER_READ_BIT_KHRACCESS_2_TRANSFER_WRITE_BIT_KHRACCESS_2_HOST_READ_BIT_KHRACCESS_2_HOST_WRITE_BIT_KHRACCESS_2_MEMORY_READ_BIT_KHRACCESS_2_MEMORY_WRITE_BIT_KHRACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXTACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEIACCESS_2_SHADER_SAMPLED_READ_BIT_KHRACCESS_2_SHADER_STORAGE_READ_BIT_KHRACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR"

var _AccessFlagBits2KHR_map = map[AccessFlagBits2KHR]string{
	0:           _AccessFlagBits2KHR_name[0:17],
	1:           _AccessFlagBits2KHR_name[17:55],
	2:           _AccessFlagBits2KHR_name[55:82],
	4:           _AccessFlagBits2KHR_name[82:120],
	8:           _AccessFlagBits2KHR_name[120:149],
	16:          _AccessFlagBits2KHR_name[149:187],
	32:          _AccessFlagBits2KHR_name[187:215],
	64:          _AccessFlagBits2KHR_name[215:244],
	128:         _AccessFlagBits2KHR_name[244:282],
	256:         _AccessFlagBits2KHR_name[282:321],
	512:         _AccessFlagBits2KHR_name[321:367],
	1024:        _AccessFlagBits2KHR_name[367:414],
	2048:        _AccessFlagBits2KHR_name[414:444],
	4096:        _AccessFlagBits2KHR_name[444:475],
	8192:        _AccessFlagBits2KHR_name[475:501],
	16384:       _AccessFlagBits2KHR_name[501:528],
	32768:       _AccessFlagBits2KHR_name[528:556],
	65536:       _AccessFlagBits2KHR_name[556:585],
	1000314000:  _AccessFlagBits2KHR_name[585:633],
	1000370000:  _AccessFlagBits2KHR_name[633:673],
	4294967296:  _AccessFlagBits2KHR_name[673:709],
	8589934592:  _AccessFlagBits2KHR_name[709:745],
	17179869184: _AccessFlagBits2KHR_name[745:782],
}

func (i AccessFlagBits2KHR) String() string {
	if str, ok := _AccessFlagBits2KHR_map[i]; ok {
		return str
	}
	return "AccessFlagBits2KHR(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT-1]
}

const _AttachmentDescriptionFlagBits_name = "ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT"

var _AttachmentDescriptionFlagBits_index = [...]uint8{0, 36}

func (i AttachmentDescriptionFlagBits) String() string {
	i -= 1
	if i >= AttachmentDescriptionFlagBits(len(_AttachmentDescriptionFlagBits_index)-1) {
		return "AttachmentDescriptionFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _AttachmentDescriptionFlagBits_name[_AttachmentDescriptionFlagBits_index[i]:_AttachmentDescriptionFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ATTACHMENT_LOAD_OP_LOAD-0]
	_ = x[ATTACHMENT_LOAD_OP_CLEAR-1]
	_ = x[ATTACHMENT_LOAD_OP_DONT_CARE-2]
	_ = x[ATTACHMENT_LOAD_OP_NONE_EXT-1000400000]
}

const (
	_AttachmentLoadOp_name_0 = "ATTACHMENT_LOAD_OP_LOADATTACHMENT_LOAD_OP_CLEARATTACHMENT_LOAD_OP_DONT_CARE"
	_AttachmentLoadOp_name_1 = "ATTACHMENT_LOAD_OP_NONE_EXT"
)

var (
	_AttachmentLoadOp_index_0 = [...]uint8{0, 23, 47, 75}
)

func (i AttachmentLoadOp) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _AttachmentLoadOp_name_0[_AttachmentLoadOp_index_0[i]:_AttachmentLoadOp_index_0[i+1]]
	case i == 1000400000:
		return _AttachmentLoadOp_name_1
	default:
		return "AttachmentLoadOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ATTACHMENT_STORE_OP_STORE-0]
	_ = x[ATTACHMENT_STORE_OP_DONT_CARE-1]
	_ = x[ATTACHMENT_STORE_OP_NONE_KHR-1000044000]
	_ = x[ATTACHMENT_STORE_OP_NONE_EXT-1000044000]
	_ = x[ATTACHMENT_STORE_OP_NONE_QCOM-1000044000]
}

const (
	_AttachmentStoreOp_name_0 = "ATTACHMENT_STORE_OP_STOREATTACHMENT_STORE_OP_DONT_CARE"
	_AttachmentStoreOp_name_1 = "ATTACHMENT_STORE_OP_NONE_KHR"
)

var (
	_AttachmentStoreOp_index_0 = [...]uint8{0, 25, 54}
)

func (i AttachmentStoreOp) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _AttachmentStoreOp_name_0[_AttachmentStoreOp_index_0[i]:_AttachmentStoreOp_index_0[i+1]]
	case i == 1000044000:
		return _AttachmentStoreOp_name_1
	default:
		return "AttachmentStoreOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BLEND_FACTOR_ZERO-0]
	_ = x[BLEND_FACTOR_ONE-1]
	_ = x[BLEND_FACTOR_SRC_COLOR-2]
	_ = x[BLEND_FACTOR_ONE_MINUS_SRC_COLOR-3]
	_ = x[BLEND_FACTOR_DST_COLOR-4]
	_ = x[BLEND_FACTOR_ONE_MINUS_DST_COLOR-5]
	_ = x[BLEND_FACTOR_SRC_ALPHA-6]
	_ = x[BLEND_FACTOR_ONE_MINUS_SRC_ALPHA-7]
	_ = x[BLEND_FACTOR_DST_ALPHA-8]
	_ = x[BLEND_FACTOR_ONE_MINUS_DST_ALPHA-9]
	_ = x[BLEND_FACTOR_CONSTANT_COLOR-10]
	_ = x[BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR-11]
	_ = x[BLEND_FACTOR_CONSTANT_ALPHA-12]
	_ = x[BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA-13]
	_ = x[BLEND_FACTOR_SRC_ALPHA_SATURATE-14]
	_ = x[BLEND_FACTOR_SRC1_COLOR-15]
	_ = x[BLEND_FACTOR_ONE_MINUS_SRC1_COLOR-16]
	_ = x[BLEND_FACTOR_SRC1_ALPHA-17]
	_ = x[BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA-18]
}

const _BlendFactor_name = "BLEND_FACTOR_ZEROBLEND_FACTOR_ONEBLEND_FACTOR_SRC_COLORBLEND_FACTOR_ONE_MINUS_SRC_COLORBLEND_FACTOR_DST_COLORBLEND_FACTOR_ONE_MINUS_DST_COLORBLEND_FACTOR_SRC_ALPHABLEND_FACTOR_ONE_MINUS_SRC_ALPHABLEND_FACTOR_DST_ALPHABLEND_FACTOR_ONE_MINUS_DST_ALPHABLEND_FACTOR_CONSTANT_COLORBLEND_FACTOR_ONE_MINUS_CONSTANT_COLORBLEND_FACTOR_CONSTANT_ALPHABLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHABLEND_FACTOR_SRC_ALPHA_SATURATEBLEND_FACTOR_SRC1_COLORBLEND_FACTOR_ONE_MINUS_SRC1_COLORBLEND_FACTOR_SRC1_ALPHABLEND_FACTOR_ONE_MINUS_SRC1_ALPHA"

var _BlendFactor_index = [...]uint16{0, 17, 33, 55, 87, 109, 141, 163, 195, 217, 249, 276, 313, 340, 377, 408, 431, 464, 487, 520}

func (i BlendFactor) String() string {
	if i < 0 || i >= BlendFactor(len(_BlendFactor_index)-1) {
		return "BlendFactor(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _BlendFactor_name[_BlendFactor_index[i]:_BlendFactor_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BLEND_OP_ADD-0]
	_ = x[BLEND_OP_SUBTRACT-1]
	_ = x[BLEND_OP_REVERSE_SUBTRACT-2]
	_ = x[BLEND_OP_MIN-3]
	_ = x[BLEND_OP_MAX-4]
	_ = x[BLEND_OP_ZERO_EXT-1000148000]
	_ = x[BLEND_OP_SRC_EXT-1000148001]
	_ = x[BLEND_OP_DST_EXT-1000148002]
	_ = x[BLEND_OP_SRC_OVER_EXT-1000148003]
	_ = x[BLEND_OP_DST_OVER_EXT-1000148004]
	_ = x[BLEND_OP_SRC_IN_EXT-1000148005]
	_ = x[BLEND_OP_DST_IN_EXT-1000148006]
	_ = x[BLEND_OP_SRC_OUT_EXT-1000148007]
	_ = x[BLEND_OP_DST_OUT_EXT-1000148008]
	_ = x[BLEND_OP_SRC_ATOP_EXT-1000148009]
	_ = x[BLEND_OP_DST_ATOP_EXT-1000148010]
	_ = x[BLEND_OP_XOR_EXT-1000148011]
	_ = x[BLEND_OP_MULTIPLY_EXT-1000148012]
	_ = x[BLEND_OP_SCREEN_EXT-1000148013]
	_ = x[BLEND_OP_OVERLAY_EXT-1000148014]
	_ = x[BLEND_OP_DARKEN_EXT-1000148015]
	_ = x[BLEND_OP_LIGHTEN_EXT-1000148016]
	_ = x[BLEND_OP_COLORDODGE_EXT-1000148017]
	_ = x[BLEND_OP_COLORBURN_EXT-1000148018]
	_ = x[BLEND_OP_HARDLIGHT_EXT-1000148019]
	_ = x[BLEND_OP_SOFTLIGHT_EXT-1000148020]
	_ = x[BLEND_OP_DIFFERENCE_EXT-1000148021]
	_ = x[BLEND_OP_EXCLUSION_EXT-1000148022]
	_ = x[BLEND_OP_INVERT_EXT-1000148023]
	_ = x[BLEND_OP_INVERT_RGB_EXT-1000148024]
	_ = x[BLEND_OP_LINEARDODGE_EXT-1000148025]
	_ = x[BLEND_OP_LINEARBURN_EXT-1000148026]
	_ = x[BLEND_OP_VIVIDLIGHT_EXT-1000148027]
	_ = x[BLEND_OP_LINEARLIGHT_EXT-1000148028]
	_ = x[BLEND_OP_PINLIGHT_EXT-1000148029]
	_ = x[BLEND_OP_HARDMIX_EXT-1000148030]
	_ = x[BLEND_OP_HSL_HUE_EXT-1000148031]
	_ = x[BLEND_OP_HSL_SATURATION_EXT-1000148032]
	_ = x[BLEND_OP_HSL_COLOR_EXT-1000148033]
	_ = x[BLEND_OP_HSL_LUMINOSITY_EXT-1000148034]
	_ = x[BLEND_OP_PLUS_EXT-1000148035]
	_ = x[BLEND_OP_PLUS_CLAMPED_EXT-1000148036]
	_ = x[BLEND_OP_PLUS_CLAMPED_ALPHA_EXT-1000148037]
	_ = x[BLEND_OP_PLUS_DARKER_EXT-1000148038]
	_ = x[BLEND_OP_MINUS_EXT-1000148039]
	_ = x[BLEND_OP_MINUS_CLAMPED_EXT-1000148040]
	_ = x[BLEND_OP_CONTRAST_EXT-1000148041]
	_ = x[BLEND_OP_INVERT_OVG_EXT-1000148042]
	_ = x[BLEND_OP_RED_EXT-1000148043]
	_ = x[BLEND_OP_GREEN_EXT-1000148044]
	_ = x[BLEND_OP_BLUE_EXT-1000148045]
}

const (
	_BlendOp_name_0 = "BLEND_OP_ADDBLEND_OP_SUBTRACTBLEND_OP_REVERSE_SUBTRACTBLEND_OP_MINBLEND_OP_MAX"
	_BlendOp_name_1 = "BLEND_OP_ZERO_EXTBLEND_OP_SRC_EXTBLEND_OP_DST_EXTBLEND_OP_SRC_OVER_EXTBLEND_OP_DST_OVER_EXTBLEND_OP_SRC_IN_EXTBLEND_OP_DST_IN_EXTBLEND_OP_SRC_OUT_EXTBLEND_OP_DST_OUT_EXTBLEND_OP_SRC_ATOP_EXTBLEND_OP_DST_ATOP_EXTBLEND_OP_XOR_EXTBLEND_OP_MULTIPLY_EXTBLEND_OP_SCREEN_EXTBLEND_OP_OVERLAY_EXTBLEND_OP_DARKEN_EXTBLEND_OP_LIGHTEN_EXTBLEND_OP_COLORDODGE_EXTBLEND_OP_COLORBURN_EXTBLEND_OP_HARDLIGHT_EXTBLEND_OP_SOFTLIGHT_EXTBLEND_OP_DIFFERENCE_EXTBLEND_OP_EXCLUSION_EXTBLEND_OP_INVERT_EXTBLEND_OP_INVERT_RGB_EXTBLEND_OP_LINEARDODGE_EXTBLEND_OP_LINEARBURN_EXTBLEND_OP_VIVIDLIGHT_EXTBLEND_OP_LINEARLIGHT_EXTBLEND_OP_PINLIGHT_EXTBLEND_OP_HARDMIX_EXTBLEND_OP_HSL_HUE_EXTBLEND_OP_HSL_SATURATION_EXTBLEND_OP_HSL_COLOR_EXTBLEND_OP_HSL_LUMINOSITY_EXTBLEND_OP_PLUS_EXTBLEND_OP_PLUS_CLAMPED_EXTBLEND_OP_PLUS_CLAMPED_ALPHA_EXTBLEND_OP_PLUS_DARKER_EXTBLEND_OP_MINUS_EXTBLEND_OP_MINUS_CLAMPED_EXTBLEND_OP_CONTRAST_EXTBLEND_OP_INVERT_OVG_EXTBLEND_OP_RED_EXTBLEND_OP_GREEN_EXTBLEND_OP_BLUE_EXT"
)

var (
	_BlendOp_index_0 = [...]uint8{0, 12, 29, 54, 66, 78}
	_BlendOp_index_1 = [...]uint16{0, 17, 33, 49, 70, 91, 110, 129, 149, 169, 190, 211, 227, 248, 267, 287, 306, 326, 349, 371, 393, 415, 438, 460, 479, 502, 526, 549, 572, 596, 617, 637, 657, 684, 706, 733, 750, 775, 806, 830, 848, 874, 895, 918, 934, 952, 969}
)

func (i BlendOp) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _BlendOp_name_0[_BlendOp_index_0[i]:_BlendOp_index_0[i+1]]
	case 1000148000 <= i && i <= 1000148045:
		i -= 1000148000
		return _BlendOp_name_1[_BlendOp_index_1[i]:_BlendOp_index_1[i+1]]
	default:
		return "BlendOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BLEND_OVERLAP_UNCORRELATED_EXT-0]
	_ = x[BLEND_OVERLAP_DISJOINT_EXT-1]
	_ = x[BLEND_OVERLAP_CONJOINT_EXT-2]
}

const _BlendOverlapEXT_name = "BLEND_OVERLAP_UNCORRELATED_EXTBLEND_OVERLAP_DISJOINT_EXTBLEND_OVERLAP_CONJOINT_EXT"

var _BlendOverlapEXT_index = [...]uint8{0, 30, 56, 82}

func (i BlendOverlapEXT) String() string {
	if i < 0 || i >= BlendOverlapEXT(len(_BlendOverlapEXT_index)-1) {
		return "BlendOverlapEXT(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _BlendOverlapEXT_name[_BlendOverlapEXT_index[i]:_BlendOverlapEXT_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BORDER_COLOR_FLOAT_TRANSPARENT_BLACK-0]
	_ = x[BORDER_COLOR_INT_TRANSPARENT_BLACK-1]
	_ = x[BORDER_COLOR_FLOAT_OPAQUE_BLACK-2]
	_ = x[BORDER_COLOR_INT_OPAQUE_BLACK-3]
	_ = x[BORDER_COLOR_FLOAT_OPAQUE_WHITE-4]
	_ = x[BORDER_COLOR_INT_OPAQUE_WHITE-5]
	_ = x[BORDER_COLOR_FLOAT_CUSTOM_EXT-1000287003]
	_ = x[BORDER_COLOR_INT_CUSTOM_EXT-1000287004]
}

const (
	_BorderColor_name_0 = "BORDER_COLOR_FLOAT_TRANSPARENT_BLACKBORDER_COLOR_INT_TRANSPARENT_BLACKBORDER_COLOR_FLOAT_OPAQUE_BLACKBORDER_COLOR_INT_OPAQUE_BLACKBORDER_COLOR_FLOAT_OPAQUE_WHITEBORDER_COLOR_INT_OPAQUE_WHITE"
	_BorderColor_name_1 = "BORDER_COLOR_FLOAT_CUSTOM_EXTBORDER_COLOR_INT_CUSTOM_EXT"
)

var (
	_BorderColor_index_0 = [...]uint8{0, 36, 70, 101, 130, 161, 190}
	_BorderColor_index_1 = [...]uint8{0, 29, 56}
)

func (i BorderColor) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _BorderColor_name_0[_BorderColor_index_0[i]:_BorderColor_index_0[i+1]]
	case 1000287003 <= i && i <= 1000287004:
		i -= 1000287003
		return _BorderColor_name_1[_BorderColor_index_1[i]:_BorderColor_index_1[i+1]]
	default:
		return "BorderColor(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BUFFER_CREATE_SPARSE_BINDING_BIT-1]
	_ = x[BUFFER_CREATE_SPARSE_RESIDENCY_BIT-2]
	_ = x[BUFFER_CREATE_SPARSE_ALIASED_BIT-4]
	_ = x[BUFFER_CREATE_PROTECTED_BIT-8]
	_ = x[BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT-16]
	_ = x[BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR-16]
	_ = x[BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT-16]
}

const (
	_BufferCreateFlagBits_name_0 = "BUFFER_CREATE_SPARSE_BINDING_BITBUFFER_CREATE_SPARSE_RESIDENCY_BIT"
	_BufferCreateFlagBits_name_1 = "BUFFER_CREATE_SPARSE_ALIASED_BIT"
	_BufferCreateFlagBits_name_2 = "BUFFER_CREATE_PROTECTED_BIT"
	_BufferCreateFlagBits_name_3 = "BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT"
)

var (
	_BufferCreateFlagBits_index_0 = [...]uint8{0, 32, 66}
)

func (i BufferCreateFlagBits) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _BufferCreateFlagBits_name_0[_BufferCreateFlagBits_index_0[i]:_BufferCreateFlagBits_index_0[i+1]]
	case i == 4:
		return _BufferCreateFlagBits_name_1
	case i == 8:
		return _BufferCreateFlagBits_name_2
	case i == 16:
		return _BufferCreateFlagBits_name_3
	default:
		return "BufferCreateFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BUFFER_USAGE_TRANSFER_SRC_BIT-1]
	_ = x[BUFFER_USAGE_TRANSFER_DST_BIT-2]
	_ = x[BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT-131072]
	_ = x[BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT-4]
	_ = x[BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT-8]
	_ = x[BUFFER_USAGE_UNIFORM_BUFFER_BIT-16]
	_ = x[BUFFER_USAGE_STORAGE_BUFFER_BIT-32]
	_ = x[BUFFER_USAGE_INDEX_BUFFER_BIT-64]
	_ = x[BUFFER_USAGE_VERTEX_BUFFER_BIT-128]
	_ = x[BUFFER_USAGE_INDIRECT_BUFFER_BIT-256]
	_ = x[BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT-1000028000]
	_ = x[BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT-1000028000]
	_ = x[BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT-1000081000]
	_ = x[BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR-1000150000]
	_ = x[BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR-1000150000]
	_ = x[BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR-1000347000]
	_ = x[BUFFER_USAGE_RAY_TRACING_BIT_NV-1000347000]
	_ = x[BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR-131072]
	_ = x[BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT-131072]
}

const _BufferUsageFlagBits_name = "BUFFER_USAGE_TRANSFER_SRC_BITBUFFER_USAGE_TRANSFER_DST_BITBUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BITBUFFER_USAGE_STORAGE_TEXEL_BUFFER_BITBUFFER_USAGE_UNIFORM_BUFFER_BITBUFFER_USAGE_STORAGE_BUFFER_BITBUFFER_USAGE_INDEX_BUFFER_BITBUFFER_USAGE_VERTEX_BUFFER_BITBUFFER_USAGE_INDIRECT_BUFFER_BITBUFFER_USAGE_SHADER_DEVICE_ADDRESS_BITBUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXTBUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXTBUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHRBUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR"

var _BufferUsageFlagBits_map = map[BufferUsageFlagBits]string{
	1:          _BufferUsageFlagBits_name[0:29],
	2:          _BufferUsageFlagBits_name[29:58],
	4:          _BufferUsageFlagBits_name[58:95],
	8:          _BufferUsageFlagBits_name[95:132],
	16:         _BufferUsageFlagBits_name[132:163],
	32:         _BufferUsageFlagBits_name[163:194],
	64:         _BufferUsageFlagBits_name[194:223],
	128:        _BufferUsageFlagBits_name[223:253],
	256:        _BufferUsageFlagBits_name[253:285],
	131072:     _BufferUsageFlagBits_name[285:323],
	1000028000: _BufferUsageFlagBits_name[323:369],
	1000081000: _BufferUsageFlagBits_name[369:411],
	1000150000: _BufferUsageFlagBits_name[411:476],
	1000347000: _BufferUsageFlagBits_name[476:517],
}

func (i BufferUsageFlagBits) String() string {
	if str, ok := _BufferUsageFlagBits_map[i]; ok {
		return str
	}
	return "BufferUsageFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR-1]
	_ = x[BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR-2]
	_ = x[BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR-4]
	_ = x[BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR-8]
	_ = x[BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR-16]
	_ = x[BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV-1000327000]
	_ = x[BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV-2]
	_ = x[BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV-1]
	_ = x[BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV-16]
	_ = x[BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV-8]
	_ = x[BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV-4]
}

const (
	_BuildAccelerationStructureFlagBitsKHR_name_0 = "BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHRBUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR"
	_BuildAccelerationStructureFlagBitsKHR_name_1 = "BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR"
	_BuildAccelerationStructureFlagBitsKHR_name_2 = "BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR"
	_BuildAccelerationStructureFlagBitsKHR_name_3 = "BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR"
	_BuildAccelerationStructureFlagBitsKHR_name_4 = "BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV"
)

var (
	_BuildAccelerationStructureFlagBitsKHR_index_0 = [...]uint8{0, 49, 102}
)

func (i BuildAccelerationStructureFlagBitsKHR) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _BuildAccelerationStructureFlagBitsKHR_name_0[_BuildAccelerationStructureFlagBitsKHR_index_0[i]:_BuildAccelerationStructureFlagBitsKHR_index_0[i+1]]
	case i == 4:
		return _BuildAccelerationStructureFlagBitsKHR_name_1
	case i == 8:
		return _BuildAccelerationStructureFlagBitsKHR_name_2
	case i == 16:
		return _BuildAccelerationStructureFlagBitsKHR_name_3
	case i == 1000327000:
		return _BuildAccelerationStructureFlagBitsKHR_name_4
	default:
		return "BuildAccelerationStructureFlagBitsKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR-0]
	_ = x[BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR-1]
}

const _BuildAccelerationStructureModeKHR_name = "BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHRBUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR"

var _BuildAccelerationStructureModeKHR_index = [...]uint8{0, 43, 87}

func (i BuildAccelerationStructureModeKHR) String() string {
	if i < 0 || i >= BuildAccelerationStructureModeKHR(len(_BuildAccelerationStructureModeKHR_index)-1) {
		return "BuildAccelerationStructureModeKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _BuildAccelerationStructureModeKHR_name[_BuildAccelerationStructureModeKHR_index[i]:_BuildAccelerationStructureModeKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CHROMA_LOCATION_COSITED_EVEN-0]
	_ = x[CHROMA_LOCATION_MIDPOINT-1]
	_ = x[CHROMA_LOCATION_COSITED_EVEN_KHR-0]
	_ = x[CHROMA_LOCATION_MIDPOINT_KHR-1]
}

const _ChromaLocation_name = "CHROMA_LOCATION_COSITED_EVENCHROMA_LOCATION_MIDPOINT"

var _ChromaLocation_index = [...]uint8{0, 28, 52}

func (i ChromaLocation) String() string {
	if i < 0 || i >= ChromaLocation(len(_ChromaLocation_index)-1) {
		return "ChromaLocation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ChromaLocation_name[_ChromaLocation_index[i]:_ChromaLocation_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV-0]
	_ = x[COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV-1]
	_ = x[COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV-2]
	_ = x[COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV-3]
}

const _CoarseSampleOrderTypeNV_name = "COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NVCOARSE_SAMPLE_ORDER_TYPE_CUSTOM_NVCOARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NVCOARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV"

var _CoarseSampleOrderTypeNV_index = [...]uint8{0, 35, 69, 108, 148}

func (i CoarseSampleOrderTypeNV) String() string {
	if i < 0 || i >= CoarseSampleOrderTypeNV(len(_CoarseSampleOrderTypeNV_index)-1) {
		return "CoarseSampleOrderTypeNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CoarseSampleOrderTypeNV_name[_CoarseSampleOrderTypeNV_index[i]:_CoarseSampleOrderTypeNV_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COLOR_COMPONENT_R_BIT-1]
	_ = x[COLOR_COMPONENT_G_BIT-2]
	_ = x[COLOR_COMPONENT_B_BIT-4]
	_ = x[COLOR_COMPONENT_A_BIT-8]
}

const (
	_ColorComponentFlagBits_name_0 = "COLOR_COMPONENT_R_BITCOLOR_COMPONENT_G_BIT"
	_ColorComponentFlagBits_name_1 = "COLOR_COMPONENT_B_BIT"
	_ColorComponentFlagBits_name_2 = "COLOR_COMPONENT_A_BIT"
)

var (
	_ColorComponentFlagBits_index_0 = [...]uint8{0, 21, 42}
)

func (i ColorComponentFlagBits) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _ColorComponentFlagBits_name_0[_ColorComponentFlagBits_index_0[i]:_ColorComponentFlagBits_index_0[i+1]]
	case i == 4:
		return _ColorComponentFlagBits_name_1
	case i == 8:
		return _ColorComponentFlagBits_name_2
	default:
		return "ColorComponentFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COLOR_SPACE_SRGB_NONLINEAR_KHR-0]
	_ = x[COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT-1000104001]
	_ = x[COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT-1000104002]
	_ = x[COLOR_SPACE_DISPLAY_P3_LINEAR_EXT-1000104003]
	_ = x[COLOR_SPACE_DCI_P3_NONLINEAR_EXT-1000104004]
	_ = x[COLOR_SPACE_BT709_LINEAR_EXT-1000104005]
	_ = x[COLOR_SPACE_BT709_NONLINEAR_EXT-1000104006]
	_ = x[COLOR_SPACE_BT2020_LINEAR_EXT-1000104007]
	_ = x[COLOR_SPACE_HDR10_ST2084_EXT-1000104008]
	_ = x[COLOR_SPACE_DOLBYVISION_EXT-1000104009]
	_ = x[COLOR_SPACE_HDR10_HLG_EXT-1000104010]
	_ = x[COLOR_SPACE_ADOBERGB_LINEAR_EXT-1000104011]
	_ = x[COLOR_SPACE_ADOBERGB_NONLINEAR_EXT-1000104012]
	_ = x[COLOR_SPACE_PASS_THROUGH_EXT-1000104013]
	_ = x[COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT-1000104014]
	_ = x[COLOR_SPACE_DISPLAY_NATIVE_AMD-1000213000]
	_ = x[COLOR_SPACE_DCI_P3_LINEAR_EXT-1000104003]
	_ = x[COLORSPACE_SRGB_NONLINEAR_KHR-0]
}

const (
	_ColorSpaceKHR_name_0 = "COLOR_SPACE_SRGB_NONLINEAR_KHR"
	_ColorSpaceKHR_name_1 = "COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXTCOLOR_SPACE_EXTENDED_SRGB_LINEAR_EXTCOLOR_SPACE_DISPLAY_P3_LINEAR_EXTCOLOR_SPACE_DCI_P3_NONLINEAR_EXTCOLOR_SPACE_BT709_LINEAR_EXTCOLOR_SPACE_BT709_NONLINEAR_EXTCOLOR_SPACE_BT2020_LINEAR_EXTCOLOR_SPACE_HDR10_ST2084_EXTCOLOR_SPACE_DOLBYVISION_EXTCOLOR_SPACE_HDR10_HLG_EXTCOLOR_SPACE_ADOBERGB_LINEAR_EXTCOLOR_SPACE_ADOBERGB_NONLINEAR_EXTCOLOR_SPACE_PASS_THROUGH_EXTCOLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT"
	_ColorSpaceKHR_name_2 = "COLOR_SPACE_DISPLAY_NATIVE_AMD"
)

var (
	_ColorSpaceKHR_index_1 = [...]uint16{0, 36, 72, 105, 137, 165, 196, 225, 253, 280, 305, 336, 370, 398, 437}
)

func (i ColorSpaceKHR) String() string {
	switch {
	case i == 0:
		return _ColorSpaceKHR_name_0
	case 1000104001 <= i && i <= 1000104014:
		i -= 1000104001
		return _ColorSpaceKHR_name_1[_ColorSpaceKHR_index_1[i]:_ColorSpaceKHR_index_1[i+1]]
	case i == 1000213000:
		return _ColorSpaceKHR_name_2
	default:
		return "ColorSpaceKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMMAND_BUFFER_LEVEL_PRIMARY-0]
	_ = x[COMMAND_BUFFER_LEVEL_SECONDARY-1]
}

const _CommandBufferLevel_name = "COMMAND_BUFFER_LEVEL_PRIMARYCOMMAND_BUFFER_LEVEL_SECONDARY"

var _CommandBufferLevel_index = [...]uint8{0, 28, 58}

func (i CommandBufferLevel) String() string {
	if i < 0 || i >= CommandBufferLevel(len(_CommandBufferLevel_index)-1) {
		return "CommandBufferLevel(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CommandBufferLevel_name[_CommandBufferLevel_index[i]:_CommandBufferLevel_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT-1]
}

const _CommandBufferResetFlagBits_name = "COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT"

var _CommandBufferResetFlagBits_index = [...]uint8{0, 42}

func (i CommandBufferResetFlagBits) String() string {
	i -= 1
	if i >= CommandBufferResetFlagBits(len(_CommandBufferResetFlagBits_index)-1) {
		return "CommandBufferResetFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _CommandBufferResetFlagBits_name[_CommandBufferResetFlagBits_index[i]:_CommandBufferResetFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT-1]
	_ = x[COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT-2]
	_ = x[COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT-4]
}

const (
	_CommandBufferUsageFlagBits_name_0 = "COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BITCOMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT"
	_CommandBufferUsageFlagBits_name_1 = "COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT"
)

var (
	_CommandBufferUsageFlagBits_index_0 = [...]uint8{0, 40, 85}
)

func (i CommandBufferUsageFlagBits) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _CommandBufferUsageFlagBits_name_0[_CommandBufferUsageFlagBits_index_0[i]:_CommandBufferUsageFlagBits_index_0[i+1]]
	case i == 4:
		return _CommandBufferUsageFlagBits_name_1
	default:
		return "CommandBufferUsageFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMMAND_POOL_CREATE_TRANSIENT_BIT-1]
	_ = x[COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT-2]
	_ = x[COMMAND_POOL_CREATE_PROTECTED_BIT-4]
}

const (
	_CommandPoolCreateFlagBits_name_0 = "COMMAND_POOL_CREATE_TRANSIENT_BITCOMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT"
	_CommandPoolCreateFlagBits_name_1 = "COMMAND_POOL_CREATE_PROTECTED_BIT"
)

var (
	_CommandPoolCreateFlagBits_index_0 = [...]uint8{0, 33, 77}
)

func (i CommandPoolCreateFlagBits) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _CommandPoolCreateFlagBits_name_0[_CommandPoolCreateFlagBits_index_0[i]:_CommandPoolCreateFlagBits_index_0[i+1]]
	case i == 4:
		return _CommandPoolCreateFlagBits_name_1
	default:
		return "CommandPoolCreateFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT-1]
}

const _CommandPoolResetFlagBits_name = "COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT"

var _CommandPoolResetFlagBits_index = [...]uint8{0, 40}

func (i CommandPoolResetFlagBits) String() string {
	i -= 1
	if i >= CommandPoolResetFlagBits(len(_CommandPoolResetFlagBits_index)-1) {
		return "CommandPoolResetFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _CommandPoolResetFlagBits_name[_CommandPoolResetFlagBits_index[i]:_CommandPoolResetFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMPARE_OP_NEVER-0]
	_ = x[COMPARE_OP_LESS-1]
	_ = x[COMPARE_OP_EQUAL-2]
	_ = x[COMPARE_OP_LESS_OR_EQUAL-3]
	_ = x[COMPARE_OP_GREATER-4]
	_ = x[COMPARE_OP_NOT_EQUAL-5]
	_ = x[COMPARE_OP_GREATER_OR_EQUAL-6]
	_ = x[COMPARE_OP_ALWAYS-7]
}

const _CompareOp_name = "COMPARE_OP_NEVERCOMPARE_OP_LESSCOMPARE_OP_EQUALCOMPARE_OP_LESS_OR_EQUALCOMPARE_OP_GREATERCOMPARE_OP_NOT_EQUALCOMPARE_OP_GREATER_OR_EQUALCOMPARE_OP_ALWAYS"

var _CompareOp_index = [...]uint8{0, 16, 31, 47, 71, 89, 109, 136, 153}

func (i CompareOp) String() string {
	if i < 0 || i >= CompareOp(len(_CompareOp_index)-1) {
		return "CompareOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CompareOp_name[_CompareOp_index[i]:_CompareOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMPONENT_SWIZZLE_IDENTITY-0]
	_ = x[COMPONENT_SWIZZLE_ZERO-1]
	_ = x[COMPONENT_SWIZZLE_ONE-2]
	_ = x[COMPONENT_SWIZZLE_R-3]
	_ = x[COMPONENT_SWIZZLE_G-4]
	_ = x[COMPONENT_SWIZZLE_B-5]
	_ = x[COMPONENT_SWIZZLE_A-6]
}

const _ComponentSwizzle_name = "COMPONENT_SWIZZLE_IDENTITYCOMPONENT_SWIZZLE_ZEROCOMPONENT_SWIZZLE_ONECOMPONENT_SWIZZLE_RCOMPONENT_SWIZZLE_GCOMPONENT_SWIZZLE_BCOMPONENT_SWIZZLE_A"

var _ComponentSwizzle_index = [...]uint8{0, 26, 48, 69, 88, 107, 126, 145}

func (i ComponentSwizzle) String() string {
	if i < 0 || i >= ComponentSwizzle(len(_ComponentSwizzle_index)-1) {
		return "ComponentSwizzle(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ComponentSwizzle_name[_ComponentSwizzle_index[i]:_ComponentSwizzle_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMPONENT_TYPE_FLOAT16_NV-0]
	_ = x[COMPONENT_TYPE_FLOAT32_NV-1]
	_ = x[COMPONENT_TYPE_FLOAT64_NV-2]
	_ = x[COMPONENT_TYPE_SINT8_NV-3]
	_ = x[COMPONENT_TYPE_SINT16_NV-4]
	_ = x[COMPONENT_TYPE_SINT32_NV-5]
	_ = x[COMPONENT_TYPE_SINT64_NV-6]
	_ = x[COMPONENT_TYPE_UINT8_NV-7]
	_ = x[COMPONENT_TYPE_UINT16_NV-8]
	_ = x[COMPONENT_TYPE_UINT32_NV-9]
	_ = x[COMPONENT_TYPE_UINT64_NV-10]
}

const _ComponentTypeNV_name = "COMPONENT_TYPE_FLOAT16_NVCOMPONENT_TYPE_FLOAT32_NVCOMPONENT_TYPE_FLOAT64_NVCOMPONENT_TYPE_SINT8_NVCOMPONENT_TYPE_SINT16_NVCOMPONENT_TYPE_SINT32_NVCOMPONENT_TYPE_SINT64_NVCOMPONENT_TYPE_UINT8_NVCOMPONENT_TYPE_UINT16_NVCOMPONENT_TYPE_UINT32_NVCOMPONENT_TYPE_UINT64_NV"

var _ComponentTypeNV_index = [...]uint16{0, 25, 50, 75, 98, 122, 146, 170, 193, 217, 241, 265}

func (i ComponentTypeNV) String() string {
	if i < 0 || i >= ComponentTypeNV(len(_ComponentTypeNV_index)-1) {
		return "ComponentTypeNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ComponentTypeNV_name[_ComponentTypeNV_index[i]:_ComponentTypeNV_index[i+1]]
}
